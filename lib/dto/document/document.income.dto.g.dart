// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'document.income.dto.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

DocumentIncomeDto _$DocumentIncomeDtoFromJson(Map<String, dynamic> json) =>
    DocumentIncomeDto(
      (nestedReader(json, 'id') as num?)?.toInt(),
      rawReader(json, '') as Map<String, dynamic>,
      (nestedReader(json, 'universalDocumentId') as num?)?.toInt(),
      nestedReader(json, 'typeStatus') as String?,
      (nestedReader(json, 'documentId') as num?)?.toInt(),
      (nestedReader(json, 'batchId') as num?)?.toInt(),
      (nestedReader(json, 'batchEmployeeId') as num?)?.toInt(),
      nestedReader(json, 'batchFullName') as String?,
      nestedReader(json, 'batchUploadPath') as String?,
      nestedReader(json, 'photoUploadPath') as String?,
      (nestedReader(json, 'batchPositionId') as num?)?.toInt(),
      nestedReader(json, 'batchPositionName') as String?,
      (nestedReader(json, 'batchDepartmentId') as num?)?.toInt(),
      nestedReader(json, 'batchDepartmentName') as String?,
      (nestedReader(json, 'batchStatusId') as num?)?.toInt(),
      nestedReader(json, 'batchStatusName') as String?,
      nestedReader(json, 'batchStatus') as String?,
      nestedReader(json, 'batchStatusColor') as String?,
      nestedReader(json, 'date') as String?,
      nestedReader(json, 'docDate') as String?,
      nestedReader(json, 'incomeDate') as String?,
      nestedReader(json, 'regNumber') as String?,
      nestedReader(json, 'isVisible') as bool?,
      nestedReader(json, 'comment') as String?,
      (nestedReader(json, 'ownerId') as num?)?.toInt(),
      nestedReader(json, 'ownerFullName') as String?,
      (nestedReader(json, 'documentTypeId') as num?)?.toInt(),
      nestedReader(json, 'documentTypeName') as String?,
      nestedReader(json, 'isOnlyOffice') as bool?,
      nestedReader(json, 'assStatusName') as String?,
      nestedReader(json, 'assStatus') as String?,
      nestedReader(json, 'assStatusColor') as String?,
      (nestedReader(json, 'signerId') as num?)?.toInt(),
      nestedReader(json, 'signerShortName') as String?,
      nestedReader(json, 'signerFullName') as String?,
      nestedReader(json, 'signerLastName') as String?,
      nestedReader(json, 'signerFirstName') as String?,
      nestedReader(json, 'signerParentName') as String?,
      (nestedReader(json, 'staffPositionId') as num?)?.toInt(),
      nestedReader(json, 'staffPositionName') as String?,
      (nestedReader(json, 'departmentId') as num?)?.toInt(),
      nestedReader(json, 'departmentName') as String?,
      (nestedReader(json, 'purposeId') as num?)?.toInt(),
      (nestedReader(json, 'sendPurposeId') as num?)?.toInt(),
      nestedReader(json, 'sendPurposeName') as String?,
      nestedReader(json, 'purposeName') as String?,
      nestedReader(json, 'sendPurposeCode') as String?,
      nestedReader(json, 'sendPurposeColor') as String?,
      nestedReader(json, 'expireDateAssignment') as String?,
      nestedReader(json, 'outRegNumber') as String?,
      nestedReader(json, 'outRegNumberExists') as String?,
      nestedReader(json, 'outDate') as String?,
      (nestedReader(json, 'receptionTypeId') as num?)?.toInt(),
      nestedReader(json, 'receptionTypeName') as String?,
      (nestedReader(json, 'incomeTypeId') as num?)?.toInt(),
      nestedReader(json, 'incomeTypeName') as String?,
      (nestedReader(json, 'incomeDocumentStateId') as num?)?.toInt(),
      nestedReader(json, 'incomeDocumentStateName') as String?,
      (nestedReader(json, 'contragentId') as num?)?.toInt(),
      nestedReader(json, 'contragentName') as String?,
      nestedReader(json, 'contragentFullName') as String?,
      nestedReader(json, 'contragentPositionName') as String?,
      nestedReader(json, 'contragentEmail') as String?,
      nestedReader(json, 'contragentAddress') as String?,
      (nestedReader(json, 'appealFieldId') as num?)?.toInt(),
      nestedReader(json, 'appealFieldName') as String?,
      nestedReader(json, 'personFullName') as String?,
      nestedReader(json, 'personAddress') as String?,
      nestedReader(json, 'personPhone') as String?,
      nestedReader(json, 'personEmail') as String?,
      nestedReader(json, 'personSpecialNote') as String?,
      nestedReader(json, 'incomeRegNumber') as String?,
      nestedReader(json, 'incomeDateDoc') as String?,
      nestedReader(json, 'shortContent') as String?,
      (nestedReader(json, 'recipientId') as num?)?.toInt(),
      nestedReader(json, 'recipientFullName') as String?,
      (nestedReader(json, 'recipientDepartmentId') as num?)?.toInt(),
      nestedReader(json, 'recipientDepartmentName') as String?,
      (nestedReader(json, 'recipientStaffPositionId') as num?)?.toInt(),
      nestedReader(json, 'recipientStaffPositionName') as String?,
      nestedReader(json, 'oldDocumentName') as String?,
      nestedReader(json, 'priority') as String?,
      nestedReader(json, 'prefix') as String?,
      nestedReader(json, 'isYur') as bool?,
      (nestedReader(json, 'directorId') as num?)?.toInt(),
      nestedReader(json, 'directorFullName') as String?,
      (nestedReader(json, 'statusId') as num?)?.toInt(),
      nestedReader(json, 'statusName') as String?,
      nestedReader(json, 'status') as String?,
      nestedReader(json, 'statusColor') as String?,
      nestedReader(json, 'isSendToSafety') as bool?,
      nestedReader(json, 'isManager') as bool?,
      nestedReader(json, 'isHeadOfDepartment') as bool?,
      nestedReader(json, 'createdOutgoingDocument') as bool?,
      nestedReader(json, 'isRead') as bool?,
      nestedReader(json, 'hashLink') as String?,
      nestedReader(json, 'lang') as String?,
      nestedReader(json, 'qrCodeNotUse') as bool?,
      nestedReader(json, 'isContract') as bool?,
      nestedReader(json, 'expireDate') as String?,
    );

Map<String, dynamic> _$DocumentIncomeDtoToJson(DocumentIncomeDto instance) =>
    <String, dynamic>{
      'id': instance.id,
      'universalDocumentId': instance.universalDocumentId,
      'typeStatus': instance.typeStatus,
      'documentId': instance.documentId,
      'batchId': instance.batchId,
      'batchEmployeeId': instance.batchEmployeeId,
      'batchFullName': instance.batchFullName,
      'batchUploadPath': instance.batchUploadPath,
      'photoUploadPath': instance.photoUploadPath,
      'batchPositionId': instance.batchPositionId,
      'batchPositionName': instance.batchPositionName,
      'batchDepartmentId': instance.batchDepartmentId,
      'batchDepartmentName': instance.batchDepartmentName,
      'batchStatusId': instance.batchStatusId,
      'batchStatusName': instance.batchStatusName,
      'batchStatus': instance.batchStatus,
      'batchStatusColor': instance.batchStatusColor,
      'date': instance.date,
      'docDate': instance.docDate,
      'incomeDate': instance.incomeDate,
      'regNumber': instance.regNumber,
      'isVisible': instance.isVisible,
      'comment': instance.comment,
      'ownerId': instance.ownerId,
      'ownerFullName': instance.ownerFullName,
      'documentTypeId': instance.documentTypeId,
      'documentTypeName': instance.documentTypeName,
      'isOnlyOffice': instance.isOnlyOffice,
      'assStatusName': instance.assStatusName,
      'assStatus': instance.assStatus,
      'assStatusColor': instance.assStatusColor,
      'signerId': instance.signerId,
      'signerShortName': instance.signerShortName,
      'signerFullName': instance.signerFullName,
      'signerLastName': instance.signerLastName,
      'signerFirstName': instance.signerFirstName,
      'signerParentName': instance.signerParentName,
      'staffPositionId': instance.staffPositionId,
      'staffPositionName': instance.staffPositionName,
      'departmentId': instance.departmentId,
      'departmentName': instance.departmentName,
      'purposeId': instance.purposeId,
      'sendPurposeId': instance.sendPurposeId,
      'sendPurposeName': instance.sendPurposeName,
      'purposeName': instance.purposeName,
      'sendPurposeCode': instance.sendPurposeCode,
      'sendPurposeColor': instance.sendPurposeColor,
      'expireDateAssignment': instance.expireDateAssignment,
      'outRegNumber': instance.outRegNumber,
      'outRegNumberExists': instance.outRegNumberExists,
      'outDate': instance.outDate,
      'receptionTypeId': instance.receptionTypeId,
      'receptionTypeName': instance.receptionTypeName,
      'incomeTypeId': instance.incomeTypeId,
      'incomeTypeName': instance.incomeTypeName,
      'incomeDocumentStateId': instance.incomeDocumentStateId,
      'incomeDocumentStateName': instance.incomeDocumentStateName,
      'contragentId': instance.contragentId,
      'contragentName': instance.contragentName,
      'contragentFullName': instance.contragentFullName,
      'contragentPositionName': instance.contragentPositionName,
      'contragentEmail': instance.contragentEmail,
      'contragentAddress': instance.contragentAddress,
      'appealFieldId': instance.appealFieldId,
      'appealFieldName': instance.appealFieldName,
      'personFullName': instance.personFullName,
      'personAddress': instance.personAddress,
      'personPhone': instance.personPhone,
      'personEmail': instance.personEmail,
      'personSpecialNote': instance.personSpecialNote,
      'incomeRegNumber': instance.incomeRegNumber,
      'incomeDateDoc': instance.incomeDateDoc,
      'shortContent': instance.shortContent,
      'recipientId': instance.recipientId,
      'recipientFullName': instance.recipientFullName,
      'recipientDepartmentId': instance.recipientDepartmentId,
      'recipientDepartmentName': instance.recipientDepartmentName,
      'recipientStaffPositionId': instance.recipientStaffPositionId,
      'recipientStaffPositionName': instance.recipientStaffPositionName,
      'oldDocumentName': instance.oldDocumentName,
      'priority': instance.priority,
      'prefix': instance.prefix,
      'isYur': instance.isYur,
      'directorId': instance.directorId,
      'directorFullName': instance.directorFullName,
      'statusId': instance.statusId,
      'statusName': instance.statusName,
      'status': instance.status,
      'statusColor': instance.statusColor,
      'isSendToSafety': instance.isSendToSafety,
      'isManager': instance.isManager,
      'isHeadOfDepartment': instance.isHeadOfDepartment,
      'createdOutgoingDocument': instance.createdOutgoingDocument,
      'isRead': instance.isRead,
      'hashLink': instance.hashLink,
      'lang': instance.lang,
      'qrCodeNotUse': instance.qrCodeNotUse,
      'isContract': instance.isContract,
      'expireDate': instance.expireDate,
    };

Map<String, dynamic> _$IncomeDocumentsBodyToJson(
        IncomeDocumentsBody instance) =>
    <String, dynamic>{
      'page': instance.page,
      'limit': instance.limit,
    };
